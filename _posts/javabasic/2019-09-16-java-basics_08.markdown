---
title:  "[Java기초이론] super와 super()"
excerpt: "2019-09-16 14:00:24"
toc: true
toc_sticky: true
toc_label: "페이지 주요 목차"
last_modified_at:   2019-09-16 14:00:24 +0900
categories: Java
tags:
- Java
- 기초이론
- 자바의정석
---

>## super

super는 자손 클래스에서 조상 클래스로부터 상속받은 멤버를 참조하는데 사용되는 참조 변수이다. 멤버변수와 지역변수의 이름이 같을 때 `this`를 붙여서 구별했듯이 상속받은 멤버와 자신의 클래스에 정의된 멤버의 이름이 같을 때는 `super`를 붙여서 구별할 수 있다.

`static메서드(클래스 메서드)`는 인스턴스와 관련이 없다. 그래서 `this`와 마찬가지로 `super`역시 `static메서드`에서는 사용할 수 없고 `인스턴스 메서드`에서만 사용할 수 있다.


>## super() - 조상 클래스의 생성자

`this()`와 마찬가지로 `super()`역시 생성자이다.

- this() : 같은 클래스의 다른 생성자를 호출하는데 사용
- super() : 조상 클래스의 생성자를 호출하는데 사용

자손 클래스의 인스턴스를 생성하면 자손 멤버와 조상의 멤버가 모두 합쳐진 하나의 인스턴스가 생성된다. 그래서 자손 클래스의 인스턴스가 조상 클래스의 멤버들을 사용할수 있는 것이다. 이 때 조상 클래스 멤버의 초기화 작업이 수행되어야 하기 때문에 자손 클래스의 생성자에서 조상 클래스의 생성자가 호출되어야 한다.

생성자의 첫 줄에서 조상클래스의 생성자를 호출해야하는 이유는 자손 클래스의 멤버가 조상 클래스의 멤버를 사용할 수도 있으므로 조상의 멤버들이 먼저 초기화되어 있어야 하기 때문이다.

이와 같은 조상 클래스의 생성자의 호출은 클래스의 상속관계를 거슬러 올라가면서 계속 반복된다. 마지막으로 모든 클래스의 최고 조상인 Object클래스의 생성자인 Objec()까지 가서야 끝이 난다.

그래서 Object클래스를 제외한 모든 클래스의 생성자는 첫 줄에 반드시 자신의 다른 생성자 또는 조상의 생성자를 호출해야 한다. 그렇지 않으면 컴파일러는 생성자의 첫 줄에 `super();`를 자독적으로 추가할 것이다.
