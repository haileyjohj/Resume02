---
title:  "[Java기초이론] 제어자(modifier)"
excerpt: "2019-09-16 23:52:24"
toc: true
toc_sticky: true
toc_label: "페이지 주요 목차"
last_modified_at:   2019-09-16 23:52:24 +0900
categories: Java
tags:
- Java
- 기초이론
- 자바의정석
---

>## 제어자란?

제어자는 클래스, 변수, 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여한다.

```
접근 제어자 : public, protected, default, private
그 외 : static, final, abstract, native, transient, synchronized, volatile, strictfp
```

제어자는 클래스나 멤버변수와 메서드에 주로 사용되며, 하나의 대상에 대해서 여러 제어자를 조합하여 사용하는 것이 가능하나 접근 제어자는 한 번에 하나만 선택해서 사용해야한다.


>## Static - 클래스의, 공통적인

인스턴스변수는 하나의 클래스로부터 생성되었더라도 각기 다른 값을 유지하지만, 클래스변수(static멤버변수)는 인스턴스에 관계없이 같은 값을 갖는다. 그 이유는 하나의 변수를 모든 인스턴스가 공유하기 때문이다.

static이 붙은 멤버변수와 메서드, 그리고 초기화 블럭은 인스턴스가 아닌 클래스에 관계된 것이기 때문에 인스턴스를 생성하지 않고도 사용할 수 있다.

인스턴스메서드와 static메서드의 근본적인 차이는 메서드 내에서 인스턴스 멤버를 사용하는가의 여부에 있다.

```
static이 사용될 수 있는 곳 - 멤버변수, 메서드, 초기화 블럭
```


>## final - 마지막의, 변경될 수 없는

변수에 사용되면 값을 변경할 수 없는 상수가 되며, 메서드에 사용되면 오버라이딩을 할 수 없게 되고 클래스에 사용되면 자신을 확장하는 자손클래스를 정의하지 못하게 된다.

```
final이 사용될 수 있는 곳 - 클래스, 메서드, 멤버변수, 지역변수
```

### 생성자를 이용한 final 멤버 변수의 초기화

final이 붙은 변수는 상수이므로 일반적으로 선언과 초기화를 동시에 하지만, 인스턴스변수의 경우 생성자에서 초기화 되도록 할 수 있다.

클래스 내에 매개변수를 갖는 생성자를 선언하여, 인스턴스를 생성할 때 final이 붙은 멤버변수를 초기화하는데 필요한 값을 생성자의 매개변수로부터 제공받는 것이다.


>## abstract - 추상의, 미완성의

메서드의 선언부만 작성하고 실제 수행 내용은 구현하지 않은 추상 메서드를 선언하는데 사용된다.

```
abstract가 사용될 수 있는 곳 - 클래스, 메서드를
```

추상클래스는 인스턴스를 생성할 수 없다.
꽤 드물지만 추상 메서드가 없는 클래스, 즉 완성된 클래스도 abstract를 붙여서 추상 클래스로 만드는 경우도 있다.


>## 접근 제어자(access modifier)

접근 제어자는 멤버 또는 클래스에 사용되어, 해당하는 멤버 또는 클래스를 외부에서 접근하지 못하도록 제한하는 역할을 한다.

```
접근 제어자가 사용될 수 있는 곳 - 클래스, 멤버변수, 메서드, 생성자
```

```
private 같은 클래스 내에서만 접근 가능
default 같은 패키지 내에서만 접근 가능
protected 같은 패키지 내에서, 그리고 다른 패키지의 자손 클래스에서 접근 가능
public 접근 제한이 전혀 없음
```

**접근범위**
```
public > protected > (default) > private
```


### 접근 제어자를 이용한 캡슐화

접근 제어자를 사용하는 이유

1. 클래스의 내부에 선언된 데이터를 보호하기 위해서이다.
2. 클래스 내에서만 임시로 사용되는 멤버변수나 부분작업을 처리하기 위한 메서드 등의 멤버들을 클래스 내부에 감추기 위해서이다.

만일 메서드 하나를 변경해야 한다고 가정했을 때, 이 메서드의 접근 제어자가 public이라면 메서드를 변경한 후 오류를 테스트해야하는 범위가 넓다. 그러나 접근 제어자가 default라면 패키지 내부만 확인해 보면 되고, private라면 클래스 하나만 살펴보면 된다.


### 생성자의 접근 제어자

생성자에 접근 제어자를 사용함으로써 인스턴스의 생성을 제한할 수 있다. 보통 생성자의 접근 제어자는 클래스의 접근 제어자와 같지만 다르게 지정할 수도 있다.

```java
class Singleton{
  private static Singleton s = new Singleton();
  private Singleton(){
    ...
  }
  //인스턴스를 생성하지 않고도 호출할 수 있어야 하므로 static이어야함
  public static singleton getInstance(){
    return s;
  }
}
```

이처럼 생성자를 통해 직접 인스턴스를 생성하지 못하게 하고 public메서드를 통해 인스턴스에 접근하게 함으로써 사용할 수 있는 인스턴스의 개수를 제한할 수 있다.

생성자가 private인 클래스는 다른 클래스의 조상이 될 수 없다. 자손클래스의 인스턴스를 생성할 때 조상클래스의 생성자를 호출해야만 하는데 private이므로 호출하는 것이 불가능하다.
그래서 클래스 앞에 final을 더 추가하여 상속할 수 없는 클래스라는 것을 알리는 것이 좋다.


>## 제어자(modifier)의 조합

1. 메서드에 static과 abstract를 함께 사용할 수 없다.
2. 클래스에 abstract와 final을 동시에 사용할 수 없다.
3. abstract메서드의 접근 제어자가 private일 수 없다.
4. 메서드에 private과 final을 같이 사용할 필요는 없다.
