---
title:  "[알고리즘] 03.Two pointers, Sliding window[효율성 : O(n^2)-->O(n)] / 4. 연속 부분수열"
excerpt: "2022-06-06 18:18:24"
last_modified_at:  2022-06-06 18:18:24 +0900
categories: Algorithm
tags:
- Java알고리즘
---

># 연속 부분수열  

### 설명  

N개의 수로 이루어진 수열이 주어집니다.  
이 수열에서 연속부분수열의 합이 특정숫자 M이 되는 경우가 몇 번 있는지 구하는 프로그램을 작성하세요.  
만약 N=8, M=6이고 수열이 다음과 같다면  

`1 2 1 3 1 1 1 2`

합이 6이 되는 연속부분수열은 {2, 1, 3}, {1, 3, 1, 1}, {3, 1, 1, 1}로 총 3가지입니다.  


### 입력  

첫째 줄에 N(1≤N≤100,000), M(1≤M≤100,000,000)이 주어진다.  
수열의 원소값은 1,000을 넘지 않는 자연수이다.  


### 출력  

첫째 줄에 경우의 수를 출력한다.  


예시 입력 1   
```
8 6
1 2 1 3 1 1 1 2
```
예시 출력 1  
```
3
```


### 코드  

```java
public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Main T = new Main();
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		int m = sc.nextInt();
		int[] arr = new int[n];
		for(int i = 0; i<n; i++) {
			arr[i] = sc.nextInt();
		}
		System.out.println(T.solution(n, m, arr));
	}

	public int solution(int n, int m, int[] arr) {
		int sum = 0;
		int cnt = 0;
		int p1=0;

		for(int p2=0; p2<n; p2++) {

			sum += arr[p2];
			if(sum == m){
				cnt++;
			}
			while(sum >= m) {
				sum -= arr[p1];
				p1++;
				if(sum == m){
					cnt++;
				}
			}
		}
		return cnt;
	}
}


```
