---
title:  "[알고리즘] 순환(Recursion) 07 - 멱집합"
excerpt: "2020-07-29 21:21:24"
last_modified_at:  2020-07-31 22:23:24 +0900
categories: Algorithm
tags:
- Algorithm
---

># 순환(Recursion) 응용편 : 멱집합  

인프론 강의를 보면서 연습하고 기록하고 있습니다   

>### 의사코드  

```   
powerSet(P, S){ //S의 멱집합을 구한 후 각각의 집합 P를 합집합하여 출력
	if S is an empty set{
		print P;
	}else{
		let t be the first element of S;
		powerSet(P, S-{t}); //t를 포함하지 않는 부분집합
		powerSet(Pu{t}, S-{t}); //t를 반드시 포31
		// recursion 함수가 두 개의 집합을 매개변수로 받도록 설계
		// 두 번째 집합의 모든 부분집합들에 첫번째 집합을 합집합하여 출력
	}
}
```

>### Java코드  

```java   
private static int N = 8; //범위
int[] cols = new int[N+1];

public static void main(String[] args) {
	queens(0);
}

boolean queens (int level) {
	//같은 열, 혹은 대각선에 위치해있어서 꽝
	if(!promising(level)) {
		return false;

	//성공
	}else if(level == N) {
		//실제 말이 위치 출력
		for(int i=1; i<=N; i++) {
			System.out.println("(" +i+", " + cols[i] + ")");
		}
		return true;

	//현재 레벌의 아랫쪽 레벨 검사 level+1;
	}else {
		for(int i=1; i<=N; i++) {
			cols[level+1] = i;
			if(queens(level+1)) {
				return true;
			}
		}
	}
	return false;
}

boolean promising(int level) {
	for(int i=1; i<level; i++) {
		if(cols[i] == cols[level]) { //같은 열에 놓였는지 검사
			return false;
		}else if(level-i == Math.abs(cols[level]-cols[i])) { //대각선에 놓여있는지 검사
			return false;
		}
	}
	return true;
}
```

```
(1, 1)
(2, 5)
(3, 8)
(4, 6)
(5, 3)
(6, 7)
(7, 2)
(8, 4)
```
