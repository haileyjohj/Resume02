---
title:  "[알고리즘] 02.Array(1,2차원배열) / 06.뒤집은 소수"
excerpt: "2022-02-06 21:35:24"
last_modified_at:  2022-02-06 21:35:24 +0900
categories: Algorithm
tags:
- Java알고리즘
---

># 뒤집은 소수  

### 설명  

N개의 자연수가 입력되면 각 자연수를 뒤집은 후 그 뒤집은 수가 소수이면 그 소수를 출력하는 프로그램을 작성하세요.  
예를 들어 32를 뒤집으면 23이고, 23은 소수이다. 그러면 23을 출력한다. 단 910를 뒤집으면 19로 숫자화 해야 한다.  
첫 자리부터의 연속된 0은 무시한다.  


### 입력  

첫 줄에 자연수의 개수 N(3<=N<=100)이 주어지고, 그 다음 줄에 N개의 자연수가 주어진다.  
각 자연수의 크기는 100,000를 넘지 않는다.  


### 출력  

첫 줄에 뒤집은 소수를 출력합니다. 출력순서는 입력된 순서대로 출력합니다.   


예시 입력 1   
```
9
32 55 62 20 250 370 200 30 100
```
예시 출력 1  
```
23 2 73 2 3
```


### 코드  

```java
//방법1
import java.util.ArrayList;
import java.util.Scanner;
public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Main T = new Main();
		Scanner sc = new Scanner(System.in);
		int num = sc.nextInt();

		int[] arr = new int[num];
		for(int i=0; i<num; i++) {
			arr[i] = sc.nextInt();
		}
		for(int x : T.solution(num, arr)) {
			System.out.print(x + " ");
		}

	}


	public ArrayList<Integer> solution(int n, int[] arr) {
		ArrayList<Integer> answer = new ArrayList<>();

		//입력된 자연수를 뒤집기
		for(int i=0; i<n; i++) {
			int tmp = arr[i];
			int res = 0; //뒤집은 숫자
			while(tmp > 0) {
				int t = tmp % 10; //1의 자리
				res = res * 10 + t;
				tmp = tmp / 10;
			}
			//소수판별
			if(isPrime(res)) {
				answer.add(res);
			}
		}
		return answer;
	}

	public boolean isPrime(int n) {
		if(n<2) return false;
		for(int i=2; i<n; i++) {
			if(n % i == 0) {
				return false;
			}
		}
		return true;
	}
}
```

```java
//방법2
import java.util.ArrayList;
import java.util.Scanner;
public class JC_0206 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		JC_0206 T = new JC_0206();
		Scanner sc = new Scanner(System.in);
		int num = sc.nextInt();

		int[] arr = new int[num];
		for(int i=0; i<num; i++) {
			//입력된 자연수를 뒤집기
			String tmp = new StringBuilder(sc.next()).reverse().toString();
			arr[i] = Integer.parseInt(tmp);
		}
		for(int x : T.solution(num, arr)) {
			System.out.println(x);
		}

	}

	public ArrayList<Integer> solution(int n, int[] arr) {
		ArrayList<Integer> answer = new ArrayList<>();

		//뒤집은 수가 소수인지 아닌지
		for(int i=0; i<n; i++) {
			boolean check = true; //소수이다

			for(int j=2; j<arr[i]; j++) {
				if(arr[i] % j == 0) { //소수가 아니면
					check = false;
					break;
				}
			}

			//소수면 출력 아니면 무시
			if(check && arr[i]>1) {
				answer.add(arr[i]);
			}
		}

		return answer;
	}
}
```
