---
title:  "[Java][프로그래머스 Lv.1] 모의고사 - Java Stream"
date:   2019-08-22 13:43:24 +0900
categories: algorithm
tags: programmers java
classes: wide
---

[프로그래머스 코딩테스트연습 완전탐색 모의고사](https://programmers.co.kr/learn/courses/30/lessons/42840)

> ### 문제 설명  
수포자는 수학을 포기한 사람의 준말입니다. 수포자 삼인방은 모의고사에 수학 문제를 전부 찍으려 합니다. 수포자는 1번 문제부터 마지막 문제까지 다음과 같이 찍습니다.  


- 1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...  
- 2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...  
- 3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...  

1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.  

### 제한 조건  

- 시험은 최대 10,000 문제로 구성되어있습니다.  
- 문제의 정답은 1, 2, 3, 4, 5중 하나입니다.  
- 가장 높은 점수를 받은 사람이 여럿일 경우, return하는 값을 오름차순 정렬해주세요.  

### 입출력 예  

|   answers   |  return |
|:-----------:|:-------:|
| [1,2,3,4,5] | [1]     |
| [1,3,2,4,2] | [1,2,3] |


### 입출력 예 설명  

입출력 예 #1  

- 수포자 1은 모든 문제를 맞혔습니다.  
- 수포자 2는 모든 문제를 틀렸습니다.  
- 수포자 3은 모든 문제를 틀렸습니다.  
- 따라서 가장 문제를 많이 맞힌 사람은 수포자 1입니다.  

입출력 예 #2   

- 모든 사람이 2문제씩을 맞췄습니다.  


> ### 풀이  

[참고 Java Stream 관련](https://futurecreator.github.io/2018/08/26/java-8-streams/)  



> ### 코드  

```java  
import java.util.ArrayList;

class Solution {
    public int[] solution(int[] answers) {
        int[] answer = new int[] {0,0,0};
        int[] player1 = {1,2,3,4,5};
        int[] player2 = {2,1,2,3,2,4,2,5};
        int[] player3 = {3,3,1,1,2,2,4,4,5,5};
        int max = 0;
        ArrayList<Integer> countNum = new ArrayList<>();


        for(int i=0; i<answers.length; i++){
            if(answers[i] == player1[i%5]){
                answer[0]++;
            }
            if(answers[i] == player2[i%8]){
                answer[1]++;
            }
            if(answers[i] == player3[i%10]){
                answer[2]++;
            }
        }

        for(int n : answer){
            if(n > max){
                max = n;
                System.out.println (n);
            }
        }
        for (int i = 0; i < 3; i++) {
            if (answer[i] == max) {
                countNum.add(i+1);
            }
        }
        return countNum.stream().mapToInt(i->i).toArray();
    }
}
```
